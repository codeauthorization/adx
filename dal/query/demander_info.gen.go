// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/ayang818/adx/dal/model"
)

func newDemanderInfo(db *gorm.DB) demanderInfo {
	_demanderInfo := demanderInfo{}

	_demanderInfo.demanderInfoDo.UseDB(db)
	_demanderInfo.demanderInfoDo.UseModel(&model.DemanderInfo{})

	tableName := _demanderInfo.demanderInfoDo.TableName()
	_demanderInfo.ALL = field.NewField(tableName, "*")
	_demanderInfo.ID = field.NewInt64(tableName, "id")
	_demanderInfo.Name = field.NewString(tableName, "name")
	_demanderInfo.Username = field.NewString(tableName, "username")
	_demanderInfo.Password = field.NewString(tableName, "password")
	_demanderInfo.CreateTime = field.NewTime(tableName, "create_time")
	_demanderInfo.ModifyTime = field.NewTime(tableName, "modify_time")

	_demanderInfo.fillFieldMap()

	return _demanderInfo
}

type demanderInfo struct {
	demanderInfoDo

	ALL        field.Field
	ID         field.Int64
	Name       field.String
	Username   field.String
	Password   field.String
	CreateTime field.Time
	ModifyTime field.Time

	fieldMap map[string]field.Expr
}

func (d demanderInfo) Table(newTableName string) *demanderInfo {
	d.demanderInfoDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d demanderInfo) As(alias string) *demanderInfo {
	d.demanderInfoDo.DO = *(d.demanderInfoDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *demanderInfo) updateTableName(table string) *demanderInfo {
	d.ALL = field.NewField(table, "*")
	d.ID = field.NewInt64(table, "id")
	d.Name = field.NewString(table, "name")
	d.Username = field.NewString(table, "username")
	d.Password = field.NewString(table, "password")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")

	d.fillFieldMap()

	return d
}

func (d *demanderInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *demanderInfo) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["username"] = d.Username
	d.fieldMap["password"] = d.Password
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
}

func (d demanderInfo) clone(db *gorm.DB) demanderInfo {
	d.demanderInfoDo.ReplaceDB(db)
	return d
}

type demanderInfoDo struct{ gen.DO }

func (d demanderInfoDo) Debug() *demanderInfoDo {
	return d.withDO(d.DO.Debug())
}

func (d demanderInfoDo) WithContext(ctx context.Context) *demanderInfoDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d demanderInfoDo) Clauses(conds ...clause.Expression) *demanderInfoDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d demanderInfoDo) Returning(value interface{}, columns ...string) *demanderInfoDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d demanderInfoDo) Not(conds ...gen.Condition) *demanderInfoDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d demanderInfoDo) Or(conds ...gen.Condition) *demanderInfoDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d demanderInfoDo) Select(conds ...field.Expr) *demanderInfoDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d demanderInfoDo) Where(conds ...gen.Condition) *demanderInfoDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d demanderInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *demanderInfoDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d demanderInfoDo) Order(conds ...field.Expr) *demanderInfoDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d demanderInfoDo) Distinct(cols ...field.Expr) *demanderInfoDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d demanderInfoDo) Omit(cols ...field.Expr) *demanderInfoDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d demanderInfoDo) Join(table schema.Tabler, on ...field.Expr) *demanderInfoDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d demanderInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *demanderInfoDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d demanderInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *demanderInfoDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d demanderInfoDo) Group(cols ...field.Expr) *demanderInfoDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d demanderInfoDo) Having(conds ...gen.Condition) *demanderInfoDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d demanderInfoDo) Limit(limit int) *demanderInfoDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d demanderInfoDo) Offset(offset int) *demanderInfoDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d demanderInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *demanderInfoDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d demanderInfoDo) Unscoped() *demanderInfoDo {
	return d.withDO(d.DO.Unscoped())
}

func (d demanderInfoDo) Create(values ...*model.DemanderInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d demanderInfoDo) CreateInBatches(values []*model.DemanderInfo, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d demanderInfoDo) Save(values ...*model.DemanderInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d demanderInfoDo) First() (*model.DemanderInfo, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DemanderInfo), nil
	}
}

func (d demanderInfoDo) Take() (*model.DemanderInfo, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DemanderInfo), nil
	}
}

func (d demanderInfoDo) Last() (*model.DemanderInfo, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DemanderInfo), nil
	}
}

func (d demanderInfoDo) Find() ([]*model.DemanderInfo, error) {
	result, err := d.DO.Find()
	return result.([]*model.DemanderInfo), err
}

func (d demanderInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DemanderInfo, err error) {
	buf := make([]*model.DemanderInfo, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d demanderInfoDo) FindInBatches(result *[]*model.DemanderInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d demanderInfoDo) Attrs(attrs ...field.AssignExpr) *demanderInfoDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d demanderInfoDo) Assign(attrs ...field.AssignExpr) *demanderInfoDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d demanderInfoDo) Joins(fields ...field.RelationField) *demanderInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d demanderInfoDo) Preload(fields ...field.RelationField) *demanderInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d demanderInfoDo) FirstOrInit() (*model.DemanderInfo, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DemanderInfo), nil
	}
}

func (d demanderInfoDo) FirstOrCreate() (*model.DemanderInfo, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DemanderInfo), nil
	}
}

func (d demanderInfoDo) FindByPage(offset int, limit int) (result []*model.DemanderInfo, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d demanderInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d *demanderInfoDo) withDO(do gen.Dao) *demanderInfoDo {
	d.DO = *do.(*gen.DO)
	return d
}
